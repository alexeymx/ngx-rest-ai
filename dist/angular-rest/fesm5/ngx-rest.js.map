{"version":3,"file":"ngx-rest.js","sources":["ng://ngx-rest/lib/file-upload.service.ts","ng://ngx-rest/lib/file-download.service.ts","ng://ngx-rest/lib/angular-rest.config.ts","ng://ngx-rest/lib/http-method.enum.ts","ng://ngx-rest/lib/jwt-helper.class.ts","ng://ngx-rest/lib/angular-rest.service.ts","ng://ngx-rest/lib/angular-rest.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpRequest, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/index';\nimport { map, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { isNullOrUndefined } from 'util';\n\n/**\n * FileUpload request options structure\n */\nexport interface IUploadOptions {\n    listParameterName?: any;\n    params?: {[key: string]: any};\n    headers?: any;\n}\n\n/**\n * FileUpload request state enum\n */\nexport enum FileUploadState {\n    initialize = 'initialize',\n    inProgress = 'inProgress',\n    completed = 'completed'\n}\n\n@Injectable()\nexport class FileUpload {\n\n    /**\n     * Service class constructor\n     */\n    constructor( private http: HttpClient ) {  }\n\n    /**\n     * Convert bytes size to human readable format\n     */\n    public static humanReadableFormat(bytes: number) {\n        const e = ( Math.log(bytes) / Math.log(1e3) ) | 0;\n        return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\n    }\n\n    /**\n     * Convert bytes size to human readable format\n     */\n    public static calculateSize(files: FileList) {\n        let size = 0;\n        Array.from(files).forEach((file) => { size += file.size; });\n        return size;\n    }\n\n    /**\n     * Create a FormData object to be send as request payload data\n     */\n    protected createFormData(object: any, form?: FormData, namespace?: string): FormData {\n        const formData = form || new FormData();\n\n        for (const property in object) {\n\n            if (!object.hasOwnProperty(property) || !object[property]) { continue; }\n\n            const formKey = namespace ? `${namespace}[${property}]` : property;\n            if (object[property] instanceof Date) {\n                formData.append(formKey, object[property].toISOString());\n            } else if ( object[property] instanceof FileList ) {\n                for (let i = 0; i < object[property].length; i++) {\n                    formData.append(`${property}[]`, object[property].item(i));\n                }\n            } else if (\n                typeof object[property] === 'object' && !(object[property] instanceof File)) {\n                this.createFormData(object[property], formData, formKey);\n            } else {\n                formData.append(formKey, object[property]);\n            }\n        }\n        return formData;\n    }\n\n    /**\n     * Upload the file list\n     */\n    private upload( method: string, url: string, files: FileList, options?: IUploadOptions ): Observable<any> {\n        method = method.toLowerCase();\n        if ( [ 'post', 'put' ].indexOf( method ) === -1 ) {\n            throw new Error(`FileUpload: Method \"${ method }\" not allow, use \"POST\" or \"PUT\"`);\n        }\n\n        let result = { state: null, files: files, total: 0, loaded: 0, progress: 0 };\n\n        const Params = {  };\n\n        Params[options.listParameterName ? options.listParameterName : 'files'] = files;\n\n        const res = new HttpRequest(\n            method, url,\n            this.createFormData( options.params ? { ...Params, ...options.params } : Params ),\n            { reportProgress: true, headers: new HttpHeaders(options.headers ? options.headers : {}) }\n        );\n\n        return this.http\n            .request(res)\n            .pipe(\n                map(( event ) => {\n                    switch (event.type) {\n                        case HttpEventType.Sent:\n                            result = { ...result, ...{ state: FileUploadState.initialize } };\n                            break;\n                        case HttpEventType.UploadProgress:\n                            result = {\n                                ...result,\n                                ...{\n                                    state: event.total !== event.loaded ? FileUploadState.inProgress : FileUploadState.completed,\n                                    total: event.total,\n                                    loaded: event.loaded,\n                                    progress: Math.round(100 * event.loaded / event.total)\n                                }\n                            };\n                            break;\n                        case HttpEventType.Response:\n                            if ( result.state !== FileUploadState.completed ) {\n                                result = { ...result, ...{ state: FileUploadState.completed } };\n                            }\n                            break;\n                    }\n                    return result;\n                }),\n                filter((val) => !isNullOrUndefined(val)),\n                distinctUntilChanged()\n            );\n    }\n\n    /**\n     * Upload the files using POST HTTP method\n     */\n    public post( url: string, files: FileList, options?: IUploadOptions ): Observable<any> {\n        return this.upload('post', url, files, options);\n    }\n\n    /**\n     * Upload the files using PUT HTTP method\n     */\n    public put( url: string, files: FileList, options?: IUploadOptions ): Observable<any> {\n        return this.upload('put', url, files, options);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpRequest, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs/index';\nimport { map, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { isNullOrUndefined, isUndefined } from 'util';\n\n/**\n * FileDownload request options structure\n */\nexport interface IDownloadOptions {\n    params?: {[key: string]: any};\n    headers?: any;\n}\n\n/**\n * FileDownload request state enum\n */\nexport enum FileDownloadState {\n    initialize = 'initialize',\n    inProgress = 'inProgress',\n    completed = 'completed',\n}\n\n@Injectable()\nexport class FileDownload {\n\n    /**\n     * Service class constructor\n     */\n    constructor( private http: HttpClient ) {  }\n\n    /**\n     * Convert bytes size to human readable format\n     */\n    public static humanReadableFormat(bytes: number) {\n        const e = ( Math.log(bytes) / Math.log(1e3) ) | 0;\n        return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\n    }\n\n    /**\n     * Save the Blob data\n     */\n    public static blobSave( saveAs: string, data: any ) {\n\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(data, saveAs);\n        } else {\n            const url = window.URL.createObjectURL(data), a = document.createElement('a');\n\n            document.body.appendChild(a);\n            a.setAttribute('style', 'display: none');\n            a.href = url;\n            a.download = saveAs;\n            a.click();\n            setTimeout(() => { window.URL.revokeObjectURL(url); document.body.removeChild(a); }, 400);\n        }\n    }\n\n    /**\n     * Request the file to be downloaded\n     */\n    private download(method: string, url: string, saveAs: string, options: IDownloadOptions = {}): Observable<any> {\n        method = method.toLowerCase();\n        if ( [ 'get', 'post', 'put' ].indexOf( method ) === -1 ) {\n            throw new Error(`FileDownload: Method \"${ method }\" not allow, use \"GET\", \"POST\" or \"PUT\"`);\n        }\n\n        let result = { state: null, saveAs: saveAs, total: 0, loaded: 0, progress: 0 },\n            Params = new HttpParams();\n\n        const Options = {\n            reportProgress: true,\n            headers: new HttpHeaders( options.headers || {})\n        };\n\n        if ( options.params ) {\n            Object.keys(options.params).forEach((key) => { Params = Params.set(key, options.params[key]); });\n        }\n\n        const res = method === 'GET'\n            ? new HttpRequest(method, url, { ...Options, ...{ responseType: 'blob', params: Params } })\n            : new HttpRequest(method, url, options.params || {}, { ...Options, ...{ responseType: 'blob' } });\n\n        return this.http\n            .request(res)\n            .pipe(\n                map(( event ) => {\n                    switch (event.type) {\n                        case HttpEventType.Sent:\n                            result = { ...result, ...{ state: FileDownloadState.initialize } };\n                            break;\n                        case HttpEventType.DownloadProgress:\n                            if ( !isUndefined(event.total) ) {\n                                result = {\n                                    ...result,\n                                    ...{\n                                        state: FileDownloadState.inProgress,\n                                        total: event.total,\n                                        loaded: event.loaded,\n                                        progress: Math.round(100 * event.loaded / event.total)\n                                    }\n                                };\n                            }\n                            break;\n                        case HttpEventType.Response:\n                            if ( result.state !== FileDownloadState.completed ) {\n                                result = { ...result, ...{ state: FileDownloadState.completed } };\n                                FileDownload.blobSave( saveAs, event.body );\n                            }\n                            break;\n                    }\n                    return result;\n                }),\n                filter((val) => !isNullOrUndefined(val)),\n                distinctUntilChanged()\n            );\n    }\n\n    /**\n     * Upload the files using POST HTTP method\n     */\n    public get( url: string, saveAs: string, options: IDownloadOptions = {} ): Observable<any> {\n        return this.download('get', url, saveAs, options);\n    }\n\n    /**\n     * Upload the files using POST HTTP method\n     */\n    public post( url: string, saveAs: string, options: IDownloadOptions = {} ): Observable<any> {\n        return this.download('post', url, saveAs, options);\n    }\n\n    /**\n     * Upload the files using PUT HTTP method\n     */\n    public put( url: string, saveAs: string, options: IDownloadOptions = {} ): Observable<any> {\n        return this.download('put', url, saveAs, options);\n    }\n\n}\n","export enum TypeTokenStorage {\n  cookie = 'cookie',\n  localStorage = 'localStorage',\n  sessionStorage = 'sessionStorage',\n}\n\nexport class RestServiceConfig {\n  public endPoint?: string;\n  public mockData?: boolean;\n  public tokenStorage?: TypeTokenStorage;\n  public tokenName?: string;\n  public secureCookie?: boolean;\n  public language?: string;\n  public authUri?: string;\n  public validationTokenUri?: string;\n  public UnauthorizedRedirectUri?: string;\n}\n","export enum HttpMethod {\n    Get = 'get',\n    Post = 'post',\n    Put = 'put',\n    Delete = 'Delete'\n}\n","import { IJwtPayload } from './jwt-payload.interface';\n\nexport class JwtHelper {\n\n    public static decodeToken(token = ''): IJwtPayload {\n        if (token === null || token === '') {\n            return null;\n        }\n\n        const parts = token.split('.');\n        if (parts.length !== 3) {\n            return null;\n        }\n\n        const decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            return null;\n        }\n\n        return JSON.parse(decoded);\n    }\n\n    private static urlBase64Decode(str: string): string {\n        let output = str;\n        switch (output.length % 4) {\n            case 0:\n                break;\n\n            case 2:\n                output += '==';\n                break;\n\n            case 3:\n                output += '=';\n                break;\n\n            default:\n                return null;\n        }\n\n        const data = atob(output);\n\n        return decodeURIComponent(data);\n    }\n\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { takeUntil, tap, catchError, delay } from 'rxjs/operators';\nimport { isAfter, fromUnixTime } from 'date-fns';\n\nimport { IHttpOptions } from './http-options.interface';\nimport { HttpMethod } from './http-method.enum';\nimport { JwtHelper } from './jwt-helper.class';\nimport { RestServiceConfig, TypeTokenStorage } from './angular-rest.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestClientService {\n  /** Handler used to stop all pending requests */\n  protected cancelPending$: Subject<boolean> = new Subject<boolean>();\n\n  /**  Default requests header */\n  protected baseHeader = {\n    'Cache-Control': 'no-cache',\n    accept: 'application/json',\n    Pragma: 'no-cache',\n    Authorization: '',\n    'Accept-Language': '*'\n  };\n\n  /** Service configuration parameters */\n  protected config: RestServiceConfig;\n\n  /** When true, the request header will include the authentication token */\n  protected secureRequest = false;\n\n  /** Holds a list of files to be upload on request */\n  protected withFilesRequest = false;\n\n  constructor(\n    private http: HttpClient,\n    private cookies: CookieService,\n    private readonly router: Router,\n    @Optional() config: RestServiceConfig\n  ) {\n    this.config = {\n      endPoint: '',\n      tokenName: 'AuthToken',\n      tokenStorage: TypeTokenStorage.cookie,\n      secureCookie: false,\n      mockData: false,\n      validationTokenUri: '/info',\n      authUri: '/authorize',\n      UnauthorizedRedirectUri: null\n    } as RestServiceConfig;\n\n    if (config) {\n      this.setConfig(config);\n    }\n  }\n\n  /**\n   * Set the Rest Client configuration parameters.\n   *\n   * CAUTION: This method overrides the current configuration settings\n   * and this settings will apply to all following requests\n   */\n  public setConfig(config: RestServiceConfig): RestClientService {\n    this.config = { ...this.config, ...config } as RestServiceConfig;\n    return this;\n  }\n\n  /** Return the current Rest Client configuration parameters.  */\n  public getConfig(): RestServiceConfig {\n    return this.config;\n  }\n\n  /**\n   * Get the API Token from cookies\n   */\n  public get token(): string {\n    let token = '';\n\n    switch (this.config.tokenStorage) {\n      case TypeTokenStorage.cookie:\n        token = this.cookies.get(this.config.tokenName);\n        break;\n      case TypeTokenStorage.localStorage:\n        token = localStorage.getItem(this.config.tokenName);\n        break;\n      case TypeTokenStorage.sessionStorage:\n        token = sessionStorage.getItem(this.config.tokenName);\n        break;\n      default:\n        throw new Error('Invalid Token Storage method');\n    }\n\n    return !token || typeof token === 'undefined' ? '' : token;\n  }\n\n  /**\n   * Save the API Token cookie\n   */\n  public set token(token: string) {\n    const decoded = JwtHelper.decodeToken(token);\n    const expires = fromUnixTime(decoded.exp);\n\n    switch (this.config.tokenStorage) {\n      case TypeTokenStorage.cookie:\n        this.cookies.put(\n          this.config.tokenName,\n          token,\n          { secure: this.config.secureCookie, expires }\n        );\n        break;\n      case TypeTokenStorage.localStorage:\n        localStorage.setItem(this.config.tokenName, token);\n        break;\n      case TypeTokenStorage.sessionStorage:\n        sessionStorage.setItem(this.config.tokenName, token);\n        break;\n      default:\n        throw new Error('Invalid Token Storage method');\n    }\n  }\n\n\n  /**\n   * Remove the Authentication token cookie\n   */\n  public revoke(): void {\n    switch (this.config.tokenStorage) {\n      case TypeTokenStorage.cookie:\n        this.cookies.removeAll();\n        break;\n      case TypeTokenStorage.localStorage:\n        localStorage.removeItem(this.config.tokenName);\n        break;\n      case TypeTokenStorage.sessionStorage:\n        sessionStorage.removeItem(this.config.tokenName);\n        break;\n      default:\n        throw new Error('Invalid Token Storage method');\n    }\n  }\n  /**\n   * Request an Authorization token\n   * The default authorization URI is '[API_END_POINT]/authorize'\n   * @param username Username\n   * @param password Password\n   */\n  public authorize(username: string, password: string): Observable<any> {\n    return this.post(this.config.authUri, { username, password })\n      .pipe(\n        tap(payload => {\n          this.token = payload.token;\n        })\n      );\n  }\n\n  /** Validate the Authentication token against the API */\n  public validateToken(url: string): Observable<any> {\n    return this.secured().request(HttpMethod.Post, url);\n  }\n\n  /** Removes authorization token */\n  public deauthorize(url: string): Observable<any> {\n    return this.secured().request(HttpMethod.Get, url)\n      .pipe(\n        tap(() => {\n          this.revoke();\n        })\n      );\n  }\n\n  /** Check if the client is already Authenticate  */\n  public isAuthorized(): boolean {\n    const token = this.token;\n    const decoded = JwtHelper.decodeToken(token);\n    return decoded !== null && !isAfter(new Date(), fromUnixTime(decoded.exp));\n  }\n\n  /** Cancel all pending requests */\n  public cancelPendingRequests(): void {\n    this.cancelPending$.next(true);\n  }\n\n\n  /**\n   * Set the request mode to SECURED for the next request.\n   *\n   * Secured Mode force the next request to include the authentication token.\n   * The token must be requested previously using the \"authorize\" method.\n   */\n  public secured(): RestClientService {\n    this.secureRequest = true;\n\n    return this;\n  }\n\n  /**\n   * Set the request mode to PUBLIC for the next request.\n   *\n   * Public is the default request mode and ensure that no authentication token\n   * will be pass on the next request.\n   */\n  public public(): RestClientService {\n    this.secureRequest = false;\n\n    return this;\n  }\n\n  /**\n   * API request using GET method\n   *\n   * @param url\n   * @param data A list of parametes\n   */\n  public get(url: string, data?: {}): Observable<any> {\n    return this.request(HttpMethod.Get, url, data);\n  }\n\n  /**\n   * API request using POST method\n   *\n   * @param url\n   * @param data\n   * @param responseType\n   * @param httpOptions\n   */\n  public post(url: string, data?: {}, responseType?: string, httpOptions: IHttpOptions = {}): Observable<any> {\n    return this.request(HttpMethod.Post, url, data, responseType, httpOptions);\n  }\n\n  /**\n   * API request using PUT method\n   *\n   * @param url\n   * @param data\n   * @param responseType\n   * @param httpOptions\n   */\n  public put(url: string, data?: {}, responseType?: string, httpOptions: IHttpOptions = {}): Observable<any> {\n    return this.request(HttpMethod.Put, url, data, responseType, httpOptions);\n  }\n\n  /**\n   * API request using DELETE method\n   *\n   * @param url\n   * @param data\n   * @param responseType\n   */\n  public delete(url: string, data?: {}, responseType?: string): Observable<any> {\n    return this.request(HttpMethod.Delete, url, data, responseType);\n  }\n\n  /** Set the upload file mode */\n  public withFiles(): RestClientService {\n    this.withFilesRequest = true;\n\n    return this;\n  }\n\n  /**\n   * Create a FormData object to be send as request payload data\n   */\n  protected createFormData(object: any, form?: FormData, namespace?: string): FormData {\n    const formData = form || new FormData();\n\n    for (const property in object) {\n\n      if (!object.hasOwnProperty(property) || !object[property]) { continue; }\n\n      const formKey = namespace ? `${namespace}[${property}]` : property;\n      if (object[property] instanceof Date) {\n        formData.append(formKey, object[property].toISOString());\n      } else if (object[property] instanceof FileList) {\n        for (let i = 0; i < object[property].length; i++) {\n          formData.append(`${property}[]`, object[property].item(i));\n        }\n      } else if (\n        typeof object[property] === 'object' && !(object[property] instanceof File)) {\n        this.createFormData(object[property], formData, formKey);\n      } else {\n        formData.append(formKey, object[property]);\n      }\n    }\n    return formData;\n  }\n\n\n\n  protected buildUrl(url: string): string {\n    let nUrl = `${this.config.endPoint.replace(/\\/$/, '')}/${url.replace(/^\\//g, '')}`;\n    const match = nUrl.match(/\\.([0-9a-z]+)(?:[\\?#]|$)/i);\n\n    if (this.config.mockData && match == null) {\n      nUrl = `${nUrl}.json`;\n    }\n\n    return nUrl;\n  }\n\n\n  /**\n   * Return the request headers based on configuration parameters\n   */\n  private buildHeaders() {\n    const header = { ...this.baseHeader };\n\n    if (this.config.language) { header['Accept-Language'] = this.config.language; }\n\n    if (this.secureRequest) {\n      const token = this.token;\n      if (!token) {\n        console.warn(\n          'Executing a secure request without TOKEN. '\n          + 'Authorization header will not be set!'\n        );\n      } else {\n        header.Authorization = `Bearer ${token}`;\n      }\n\n      this.secureRequest = false;\n    }\n\n    return header;\n  }\n\n\n\n  /** Raw request method */\n  protected request(\n    method: HttpMethod, url: string, data?: any, responseType?: string,\n    httpOptions: IHttpOptions = {}\n  ): Observable<any> {\n    const msDelay = Math.floor((Math.random() * 2000) + 1000);\n    const header = this.buildHeaders();\n\n    const rType = (responseType ? responseType : 'json') as 'text';\n\n    if (this.withFilesRequest) { data = this.createFormData(data); this.withFilesRequest = false; }\n\n    const options = {\n      body: method === HttpMethod.Get ? {} : data,\n      responseType: rType,\n      params: method === HttpMethod.Get ? data : {},\n      headers: header\n    };\n\n    return this.http\n      .request(\n        this.config.mockData ? HttpMethod.Get : method, this.buildUrl(url),\n        { ...options, ...httpOptions }\n      )\n      .pipe(takeUntil(this.cancelPending$))\n      .pipe(delay(this.config.mockData ? msDelay : 0))\n      .pipe(catchError((err) => {\n        if (\n          this.config.UnauthorizedRedirectUri\n          && url !== this.config.authUri\n          && err.status === 401\n        ) {\n          this.router.navigate([this.config.UnauthorizedRedirectUri]).then(() => { });\n          this.cancelPendingRequests();\n        }\n        return throwError(err);\n      }));\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { CookieModule, CookieService } from 'ngx-cookie';\n\nimport { RestServiceConfig } from './angular-rest.config';\nimport { FileDownload } from './file-download.service';\nimport { FileUpload } from './file-upload.service';\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    CookieModule.forRoot()\n  ],\n  providers: [\n    HttpClient,\n    CookieService,\n    FileDownload,\n    FileUpload,\n    RouterModule\n  ]\n})\nexport class AngularRestModule {\n  public static forRoot(config?: RestServiceConfig): ModuleWithProviders {\n    return {\n      ngModule: AngularRestModule,\n      providers: [\n        { provide: RestServiceConfig, useValue: config }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}