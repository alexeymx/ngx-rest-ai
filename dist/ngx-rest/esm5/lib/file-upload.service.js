import { __assign, __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpRequest, HttpHeaders } from '@angular/common/http';
import { map, distinctUntilChanged, filter } from 'rxjs/operators';
import { isNullOrUndefined } from 'util';
/**
 * FileUpload request state enum
 */
export var FileUploadState;
(function (FileUploadState) {
    FileUploadState["initialize"] = "initialize";
    FileUploadState["inProgress"] = "inProgress";
    FileUploadState["completed"] = "completed";
})(FileUploadState || (FileUploadState = {}));
var FileUpload = /** @class */ (function () {
    /**
     * Service class constructor
     */
    function FileUpload(http) {
        this.http = http;
    }
    /**
     * Convert bytes size to human readable format
     */
    FileUpload.humanReadableFormat = function (bytes) {
        var e = (Math.log(bytes) / Math.log(1e3)) | 0;
        return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';
    };
    /**
     * Convert bytes size to human readable format
     */
    FileUpload.calculateSize = function (files) {
        var size = 0;
        Array.from(files).forEach(function (file) { size += file.size; });
        return size;
    };
    /**
     * Create a FormData object to be send as request payload data
     */
    FileUpload.prototype.createFormData = function (object, form, namespace) {
        var formData = form || new FormData();
        for (var property in object) {
            if (!object.hasOwnProperty(property) || !object[property]) {
                continue;
            }
            var formKey = namespace ? namespace + "[" + property + "]" : property;
            if (object[property] instanceof Date) {
                formData.append(formKey, object[property].toISOString());
            }
            else if (object[property] instanceof FileList) {
                for (var i = 0; i < object[property].length; i++) {
                    formData.append(property + "[]", object[property].item(i));
                }
            }
            else if (typeof object[property] === 'object' && !(object[property] instanceof File)) {
                this.createFormData(object[property], formData, formKey);
            }
            else {
                formData.append(formKey, object[property]);
            }
        }
        return formData;
    };
    /**
     * Upload the file list
     */
    FileUpload.prototype.upload = function (method, url, files, options) {
        method = method.toLowerCase();
        if (['post', 'put'].indexOf(method) === -1) {
            throw new Error("FileUpload: Method \"" + method + "\" not allow, use \"POST\" or \"PUT\"");
        }
        var result = { state: null, files: files, total: 0, loaded: 0, progress: 0 };
        var Params = {};
        Params[options.listParameterName ? options.listParameterName : 'files'] = files;
        var res = new HttpRequest(method, url, this.createFormData(options.params ? __assign(__assign({}, Params), options.params) : Params), { reportProgress: true, headers: new HttpHeaders(options.headers ? options.headers : {}) });
        return this.http
            .request(res)
            .pipe(map(function (event) {
            switch (event.type) {
                case HttpEventType.Sent:
                    result = __assign(__assign({}, result), { state: FileUploadState.initialize });
                    break;
                case HttpEventType.UploadProgress:
                    result = __assign(__assign({}, result), {
                        state: event.total !== event.loaded ? FileUploadState.inProgress : FileUploadState.completed,
                        total: event.total,
                        loaded: event.loaded,
                        progress: Math.round(100 * event.loaded / event.total)
                    });
                    break;
                case HttpEventType.Response:
                    if (result.state !== FileUploadState.completed) {
                        result = __assign(__assign({}, result), { state: FileUploadState.completed });
                    }
                    break;
            }
            return result;
        }), filter(function (val) { return !isNullOrUndefined(val); }), distinctUntilChanged());
    };
    /**
     * Upload the files using POST HTTP method
     */
    FileUpload.prototype.post = function (url, files, options) {
        return this.upload('post', url, files, options);
    };
    /**
     * Upload the files using PUT HTTP method
     */
    FileUpload.prototype.put = function (url, files, options) {
        return this.upload('put', url, files, options);
    };
    FileUpload.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    FileUpload = __decorate([
        Injectable()
    ], FileUpload);
    return FileUpload;
}());
export { FileUpload };
//# sourceMappingURL=data:application/json;base64,