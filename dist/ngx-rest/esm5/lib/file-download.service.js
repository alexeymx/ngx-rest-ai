import { __assign } from "tslib";
import { Injectable } from '@angular/core';
import { HttpEventType, HttpRequest, HttpHeaders, HttpParams } from '@angular/common/http';
import { map, distinctUntilChanged, filter } from 'rxjs/operators';
import { isNullOrUndefined, isUndefined } from 'util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * FileDownload request state enum
 */
export var FileDownloadState;
(function (FileDownloadState) {
    FileDownloadState["initialize"] = "initialize";
    FileDownloadState["inProgress"] = "inProgress";
    FileDownloadState["completed"] = "completed";
})(FileDownloadState || (FileDownloadState = {}));
var FileDownload = /** @class */ (function () {
    /**
     * Service class constructor
     */
    function FileDownload(http) {
        this.http = http;
    }
    /**
     * Convert bytes size to human readable format
     */
    FileDownload.humanReadableFormat = function (bytes) {
        var e = (Math.log(bytes) / Math.log(1e3)) | 0;
        return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';
    };
    /**
     * Save the Blob data
     */
    FileDownload.blobSave = function (saveAs, data) {
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            window.navigator.msSaveOrOpenBlob(data, saveAs);
        }
        else {
            var url_1 = window.URL.createObjectURL(data), a_1 = document.createElement('a');
            document.body.appendChild(a_1);
            a_1.setAttribute('style', 'display: none');
            a_1.href = url_1;
            a_1.download = saveAs;
            a_1.click();
            setTimeout(function () { window.URL.revokeObjectURL(url_1); document.body.removeChild(a_1); }, 400);
        }
    };
    /**
     * Request the file to be downloaded
     */
    FileDownload.prototype.download = function (method, url, saveAs, options) {
        if (options === void 0) { options = {}; }
        method = method.toLowerCase();
        if (['get', 'post', 'put'].indexOf(method) === -1) {
            throw new Error("FileDownload: Method \"" + method + "\" not allow, use \"GET\", \"POST\" or \"PUT\"");
        }
        var result = { state: null, saveAs: saveAs, total: 0, loaded: 0, progress: 0 }, Params = new HttpParams();
        var Options = {
            reportProgress: true,
            headers: new HttpHeaders(options.headers || {})
        };
        if (options.params) {
            Object.keys(options.params).forEach(function (key) { Params = Params.set(key, options.params[key]); });
        }
        var res = method === 'GET'
            ? new HttpRequest(method, url, __assign(__assign({}, Options), { responseType: 'blob', params: Params }))
            : new HttpRequest(method, url, options.params || {}, __assign(__assign({}, Options), { responseType: 'blob' }));
        return this.http
            .request(res)
            .pipe(map(function (event) {
            switch (event.type) {
                case HttpEventType.Sent:
                    result = __assign(__assign({}, result), { state: FileDownloadState.initialize });
                    break;
                case HttpEventType.DownloadProgress:
                    if (!isUndefined(event.total)) {
                        result = __assign(__assign({}, result), {
                            state: FileDownloadState.inProgress,
                            total: event.total,
                            loaded: event.loaded,
                            progress: Math.round(100 * event.loaded / event.total)
                        });
                    }
                    break;
                case HttpEventType.Response:
                    if (result.state !== FileDownloadState.completed) {
                        result = __assign(__assign({}, result), { state: FileDownloadState.completed });
                        FileDownload.blobSave(saveAs, event.body);
                    }
                    break;
            }
            return result;
        }), filter(function (val) { return !isNullOrUndefined(val); }), distinctUntilChanged());
    };
    /**
     * Upload the files using POST HTTP method
     */
    FileDownload.prototype.get = function (url, saveAs, options) {
        if (options === void 0) { options = {}; }
        return this.download('get', url, saveAs, options);
    };
    /**
     * Upload the files using POST HTTP method
     */
    FileDownload.prototype.post = function (url, saveAs, options) {
        if (options === void 0) { options = {}; }
        return this.download('post', url, saveAs, options);
    };
    /**
     * Upload the files using PUT HTTP method
     */
    FileDownload.prototype.put = function (url, saveAs, options) {
        if (options === void 0) { options = {}; }
        return this.download('put', url, saveAs, options);
    };
    /** @nocollapse */ FileDownload.ɵfac = function FileDownload_Factory(t) { return new (t || FileDownload)(i0.ɵɵinject(i1.HttpClient)); };
    /** @nocollapse */ FileDownload.ɵprov = i0.ɵɵdefineInjectable({ token: FileDownload, factory: FileDownload.ɵfac });
    return FileDownload;
}());
export { FileDownload };
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(FileDownload, [{
        type: Injectable
    }], function () { return [{ type: i1.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,