{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-rest/lib/file-upload.service.ts","ng://ngx-rest/lib/file-download.service.ts","ng://ngx-rest/lib/ngx-rest.config.ts","ng://ngx-rest/lib/http-method.enum.ts","ng://ngx-rest/lib/jwt-helper.class.ts","ng://ngx-rest/lib/cache.service.ts","ng://ngx-rest/lib/ngx-rest.service.ts","ng://ngx-rest/lib/ngx-rest.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","initialize","inProgress","completed","FileUpload","http","humanReadableFormat","bytes","e","Math","log","pow","toFixed","calculateSize","files","size","Array","from","forEach","file","createFormData","object","form","namespace","formData","FormData","property","formKey","Date","append","toISOString","FileList","item","File","upload","method","url","options","toLowerCase","indexOf","Error","result","state","total","loaded","progress","Params","listParameterName","res","HttpRequest","params","reportProgress","headers","HttpHeaders","request","pipe","map","event","type","HttpEventType","Sent","FileUploadState","UploadProgress","round","Response","filter","val","isNullOrUndefined","distinctUntilChanged","post","put","Injectable","HttpClient","FileDownload","blobSave","saveAs","data","window","navigator","msSaveOrOpenBlob","url_1","URL","createObjectURL","a_1","document","createElement","body","appendChild","setAttribute","href","download","click","setTimeout","revokeObjectURL","removeChild","HttpParams","Options","keys","key","set","responseType","FileDownloadState","DownloadProgress","isUndefined","get","cookie","localStorage","sessionStorage","JwtHelper","decodeToken","token","parts","split","decoded","urlBase64Decode","JSON","parse","str","output","atob","decodeURIComponent","CacheService","cache","Map","has","invalidate","args","providedIn","RestClientService","cookies","router","config","cancelPending$","Subject","baseHeader","Cache-Control","accept","Pragma","Authorization","Accept-Language","secureRequest","withFilesRequest","cachedRequest","invalidateCache","endPoint","tokenName","tokenStorage","TypeTokenStorage","secureCookie","mockData","validationTokenUri","authUri","UnauthorizedRedirectUri","setConfig","getConfig","defineProperty","getItem","expires","fromUnixTime","exp","secure","setItem","revoke","removeAll","removeItem","authorize","username","password","_this","tap","payload","validateToken","secured","HttpMethod","deauthorize","isAuthorized","isAfter","cancelPendingRequests","next","cached","public","httpOptions","delete","withFiles","buildUrl","nUrl","replace","match","buildHeaders","header","language","console","warn","msDelay","floor","random","rType","cacheKey","btoa","unescape","encodeURIComponent","stringify","of","takeUntil","delay","resp","catchError","err","status","navigate","then","throwError","CookieService","Router","RestServiceConfig","decorators","Optional","NgxRestModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","HttpClientModule","CookieModule","RouterModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpRequest, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { isNullOrUndefined } from 'util';\n\n/**\n * FileUpload request options structure\n */\nexport interface IUploadOptions {\n    listParameterName?: any;\n    params?: {[key: string]: any};\n    headers?: any;\n}\n\n/**\n * FileUpload request state enum\n */\nexport enum FileUploadState {\n    initialize = 'initialize',\n    inProgress = 'inProgress',\n    completed = 'completed'\n}\n\n@Injectable()\nexport class FileUpload {\n\n    /**\n     * Service class constructor\n     */\n    constructor( private http: HttpClient ) {  }\n\n    /**\n     * Convert bytes size to human readable format\n     */\n    public static humanReadableFormat(bytes: number) {\n        const e = ( Math.log(bytes) / Math.log(1e3) ) | 0;\n        return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\n    }\n\n    /**\n     * Convert bytes size to human readable format\n     */\n    public static calculateSize(files: FileList) {\n        let size = 0;\n        Array.from(files).forEach((file) => { size += file.size; });\n        return size;\n    }\n\n    /**\n     * Create a FormData object to be send as request payload data\n     */\n    protected createFormData(object: any, form?: FormData, namespace?: string): FormData {\n        const formData = form || new FormData();\n\n        for (const property in object) {\n\n            if (!object.hasOwnProperty(property) || !object[property]) { continue; }\n\n            const formKey = namespace ? `${namespace}[${property}]` : property;\n            if (object[property] instanceof Date) {\n                formData.append(formKey, object[property].toISOString());\n            } else if ( object[property] instanceof FileList ) {\n                for (let i = 0; i < object[property].length; i++) {\n                    formData.append(`${property}[]`, object[property].item(i));\n                }\n            } else if (\n                typeof object[property] === 'object' && !(object[property] instanceof File)) {\n                this.createFormData(object[property], formData, formKey);\n            } else {\n                formData.append(formKey, object[property]);\n            }\n        }\n        return formData;\n    }\n\n    /**\n     * Upload the file list\n     */\n    private upload( method: string, url: string, files: FileList, options?: IUploadOptions ): Observable<any> {\n        method = method.toLowerCase();\n        if ( [ 'post', 'put' ].indexOf( method ) === -1 ) {\n            throw new Error(`FileUpload: Method \"${ method }\" not allow, use \"POST\" or \"PUT\"`);\n        }\n\n        let result = { state: null, files: files, total: 0, loaded: 0, progress: 0 };\n\n        const Params = {  };\n\n        Params[options.listParameterName ? options.listParameterName : 'files'] = files;\n\n        const res = new HttpRequest(\n            method, url,\n            this.createFormData( options.params ? { ...Params, ...options.params } : Params ),\n            { reportProgress: true, headers: new HttpHeaders(options.headers ? options.headers : {}) }\n        );\n\n        return this.http\n            .request(res)\n            .pipe(\n                map(( event ) => {\n                    switch (event.type) {\n                        case HttpEventType.Sent:\n                            result = { ...result, ...{ state: FileUploadState.initialize } };\n                            break;\n                        case HttpEventType.UploadProgress:\n                            result = {\n                                ...result,\n                                ...{\n                                    state: event.total !== event.loaded ? FileUploadState.inProgress : FileUploadState.completed,\n                                    total: event.total,\n                                    loaded: event.loaded,\n                                    progress: Math.round(100 * event.loaded / event.total)\n                                }\n                            };\n                            break;\n                        case HttpEventType.Response:\n                            if ( result.state !== FileUploadState.completed ) {\n                                result = { ...result, ...{ state: FileUploadState.completed } };\n                            }\n                            break;\n                    }\n                    return result;\n                }),\n                filter((val) => !isNullOrUndefined(val)),\n                distinctUntilChanged()\n            );\n    }\n\n    /**\n     * Upload the files using POST HTTP method\n     */\n    public post( url: string, files: FileList, options?: IUploadOptions ): Observable<any> {\n        return this.upload('post', url, files, options);\n    }\n\n    /**\n     * Upload the files using PUT HTTP method\n     */\n    public put( url: string, files: FileList, options?: IUploadOptions ): Observable<any> {\n        return this.upload('put', url, files, options);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpRequest, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { isNullOrUndefined, isUndefined } from 'util';\n\n/**\n * FileDownload request options structure\n */\nexport interface IDownloadOptions {\n    params?: {[key: string]: any};\n    headers?: any;\n}\n\n/**\n * FileDownload request state enum\n */\nexport enum FileDownloadState {\n    initialize = 'initialize',\n    inProgress = 'inProgress',\n    completed = 'completed',\n}\n\n@Injectable()\nexport class FileDownload {\n\n    /**\n     * Service class constructor\n     */\n    constructor( private http: HttpClient ) {  }\n\n    /**\n     * Convert bytes size to human readable format\n     */\n    public static humanReadableFormat(bytes: number) {\n        const e = ( Math.log(bytes) / Math.log(1e3) ) | 0;\n        return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\n    }\n\n    /**\n     * Save the Blob data\n     */\n    public static blobSave( saveAs: string, data: any ) {\n\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(data, saveAs);\n        } else {\n            const url = window.URL.createObjectURL(data), a = document.createElement('a');\n\n            document.body.appendChild(a);\n            a.setAttribute('style', 'display: none');\n            a.href = url;\n            a.download = saveAs;\n            a.click();\n            setTimeout(() => { window.URL.revokeObjectURL(url); document.body.removeChild(a); }, 400);\n        }\n    }\n\n    /**\n     * Request the file to be downloaded\n     */\n    private download(method: string, url: string, saveAs: string, options: IDownloadOptions = {}): Observable<any> {\n        method = method.toLowerCase();\n        if ( [ 'get', 'post', 'put' ].indexOf( method ) === -1 ) {\n            throw new Error(`FileDownload: Method \"${ method }\" not allow, use \"GET\", \"POST\" or \"PUT\"`);\n        }\n\n        let result = { state: null, saveAs: saveAs, total: 0, loaded: 0, progress: 0 },\n            Params = new HttpParams();\n\n        const Options = {\n            reportProgress: true,\n            headers: new HttpHeaders( options.headers || {})\n        };\n\n        if ( options.params ) {\n            Object.keys(options.params).forEach((key) => { Params = Params.set(key, options.params[key]); });\n        }\n\n        const res = method === 'GET'\n            ? new HttpRequest(method, url, { ...Options, ...{ responseType: 'blob', params: Params } })\n            : new HttpRequest(method, url, options.params || {}, { ...Options, ...{ responseType: 'blob' } });\n\n        return this.http\n            .request(res)\n            .pipe(\n                map(( event ) => {\n                    switch (event.type) {\n                        case HttpEventType.Sent:\n                            result = { ...result, ...{ state: FileDownloadState.initialize } };\n                            break;\n                        case HttpEventType.DownloadProgress:\n                            if ( !isUndefined(event.total) ) {\n                                result = {\n                                    ...result,\n                                    ...{\n                                        state: FileDownloadState.inProgress,\n                                        total: event.total,\n                                        loaded: event.loaded,\n                                        progress: Math.round(100 * event.loaded / event.total)\n                                    }\n                                };\n                            }\n                            break;\n                        case HttpEventType.Response:\n                            if ( result.state !== FileDownloadState.completed ) {\n                                result = { ...result, ...{ state: FileDownloadState.completed } };\n                                FileDownload.blobSave( saveAs, event.body );\n                            }\n                            break;\n                    }\n                    return result;\n                }),\n                filter((val) => !isNullOrUndefined(val)),\n                distinctUntilChanged()\n            );\n    }\n\n    /**\n     * Upload the files using POST HTTP method\n     */\n    public get( url: string, saveAs: string, options: IDownloadOptions = {} ): Observable<any> {\n        return this.download('get', url, saveAs, options);\n    }\n\n    /**\n     * Upload the files using POST HTTP method\n     */\n    public post( url: string, saveAs: string, options: IDownloadOptions = {} ): Observable<any> {\n        return this.download('post', url, saveAs, options);\n    }\n\n    /**\n     * Upload the files using PUT HTTP method\n     */\n    public put( url: string, saveAs: string, options: IDownloadOptions = {} ): Observable<any> {\n        return this.download('put', url, saveAs, options);\n    }\n\n}\n","export enum TypeTokenStorage {\n  cookie = 'cookie',\n  localStorage = 'localStorage',\n  sessionStorage = 'sessionStorage',\n}\n\nexport class RestServiceConfig {\n  public endPoint?: string;\n  public mockData?: boolean;\n  public tokenStorage?: TypeTokenStorage;\n  public tokenName?: string;\n  public secureCookie?: boolean;\n  public language?: string;\n  public authUri?: string;\n  public validationTokenUri?: string;\n  public UnauthorizedRedirectUri?: string;\n}\n","export enum HttpMethod {\n    Get = 'get',\n    Post = 'post',\n    Put = 'put',\n    Delete = 'Delete'\n}\n","import { IJwtPayload } from './jwt-payload.interface';\n\nexport class JwtHelper {\n\n    public static decodeToken(token = ''): IJwtPayload {\n        if (token === null || token === '') {\n            return null;\n        }\n\n        const parts = token.split('.');\n        if (parts.length !== 3) {\n            return null;\n        }\n\n        const decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            return null;\n        }\n\n        return JSON.parse(decoded);\n    }\n\n    private static urlBase64Decode(str: string): string {\n        let output = str;\n        switch (output.length % 4) {\n            case 0:\n                break;\n\n            case 2:\n                output += '==';\n                break;\n\n            case 3:\n                output += '=';\n                break;\n\n            default:\n                return null;\n        }\n\n        const data = atob(output);\n\n        return decodeURIComponent(data);\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CacheService {\n  private cache = new Map<string, any[]>();\n\n  public set(key: string, data: any) {\n    this.cache.set(key, data);\n  }\n\n  public get(key: string): null | any {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    } else {\n      return null;\n    }\n  }\n\n  public invalidate(key: string) {\n    if (this.cache.has(key)) {\n    }\n  }\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie';\nimport { Observable, Subject, throwError, of } from 'rxjs';\nimport { takeUntil, tap, catchError, delay } from 'rxjs/operators';\nimport { isAfter, fromUnixTime } from 'date-fns';\n\nimport { IHttpOptions } from './http-options.interface';\nimport { HttpMethod } from './http-method.enum';\nimport { JwtHelper } from './jwt-helper.class';\nimport { RestServiceConfig, TypeTokenStorage } from './ngx-rest.config';\nimport { CacheService } from './cache.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestClientService {\n  /** Handler used to stop all pending requests */\n  protected cancelPending$: Subject<boolean> = new Subject<boolean>();\n\n  /**  Default requests header */\n  protected baseHeader = {\n    'Cache-Control': 'no-cache',\n    accept: 'application/json',\n    Pragma: 'no-cache',\n    Authorization: '',\n    'Accept-Language': '*'\n  };\n\n  /** Service configuration parameters */\n  protected config: RestServiceConfig;\n\n  /** When true, the request header will include the authentication token */\n  protected secureRequest = false;\n\n  /** Holds a list of files to be upload on request */\n  protected withFilesRequest = false;\n\n  /** Prefer cache */\n  protected cachedRequest = false;\n\n  /** Invalidate cache */\n  protected invalidateCache = false;\n\n  constructor(\n    private http: HttpClient,\n    private cookies: CookieService,\n    private cache: CacheService,\n    private readonly router: Router,\n    @Optional() config: RestServiceConfig\n  ) {\n    this.config = {\n      endPoint: '',\n      tokenName: 'AuthToken',\n      tokenStorage: TypeTokenStorage.cookie,\n      secureCookie: false,\n      mockData: false,\n      validationTokenUri: '/info',\n      authUri: '/authorize',\n      UnauthorizedRedirectUri: null\n    } as RestServiceConfig;\n\n    if (config) {\n      this.setConfig(config);\n    }\n  }\n\n  /**\n   * Set the Rest Client configuration parameters.\n   *\n   * CAUTION: This method overrides the current configuration settings\n   * and this settings will apply to all following requests\n   */\n  public setConfig(config: RestServiceConfig): RestClientService {\n    this.config = { ...this.config, ...config } as RestServiceConfig;\n    return this;\n  }\n\n  /** Return the current Rest Client configuration parameters.  */\n  public getConfig(): RestServiceConfig {\n    return this.config;\n  }\n\n  /**\n   * Get the API Token from cookies\n   */\n  public get token(): string {\n    let token = '';\n\n    switch (this.config.tokenStorage) {\n      case TypeTokenStorage.cookie:\n        token = this.cookies.get(this.config.tokenName);\n        break;\n      case TypeTokenStorage.localStorage:\n        token = localStorage.getItem(this.config.tokenName);\n        break;\n      case TypeTokenStorage.sessionStorage:\n        token = sessionStorage.getItem(this.config.tokenName);\n        break;\n      default:\n        throw new Error('Invalid Token Storage method');\n    }\n\n    return !token || typeof token === 'undefined' ? '' : token;\n  }\n\n  /**\n   * Save the API Token cookie\n   */\n  public set token(token: string) {\n    const decoded = JwtHelper.decodeToken(token);\n    const expires = fromUnixTime(decoded.exp);\n\n    switch (this.config.tokenStorage) {\n      case TypeTokenStorage.cookie:\n        this.cookies.put(\n          this.config.tokenName,\n          token,\n          { secure: this.config.secureCookie, expires }\n        );\n        break;\n      case TypeTokenStorage.localStorage:\n        localStorage.setItem(this.config.tokenName, token);\n        break;\n      case TypeTokenStorage.sessionStorage:\n        sessionStorage.setItem(this.config.tokenName, token);\n        break;\n      default:\n        throw new Error('Invalid Token Storage method');\n    }\n  }\n\n\n  /**\n   * Remove the Authentication token cookie\n   */\n  public revoke(): void {\n    switch (this.config.tokenStorage) {\n      case TypeTokenStorage.cookie:\n        this.cookies.removeAll();\n        break;\n      case TypeTokenStorage.localStorage:\n        localStorage.removeItem(this.config.tokenName);\n        break;\n      case TypeTokenStorage.sessionStorage:\n        sessionStorage.removeItem(this.config.tokenName);\n        break;\n      default:\n        throw new Error('Invalid Token Storage method');\n    }\n  }\n  /**\n   * Request an Authorization token\n   * The default authorization URI is '[API_END_POINT]/authorize'\n   * @param username Username\n   * @param password Password\n   */\n  public authorize(username: string, password: string): Observable<any> {\n    return this.post(this.config.authUri, { username, password })\n      .pipe(\n        tap(payload => {\n          this.token = payload.token;\n        })\n      );\n  }\n\n  /** Validate the Authentication token against the API */\n  public validateToken(url: string): Observable<any> {\n    return this.secured().request(HttpMethod.Post, url);\n  }\n\n  /** Removes authorization token */\n  public deauthorize(url: string): Observable<any> {\n    return this.secured().request(HttpMethod.Get, url)\n      .pipe(\n        tap(() => {\n          this.revoke();\n        })\n      );\n  }\n\n  /** Check if the client is already Authenticate  */\n  public isAuthorized(): boolean {\n    const token = this.token;\n    const decoded = JwtHelper.decodeToken(token);\n    return decoded !== null && !isAfter(new Date(), fromUnixTime(decoded.exp));\n  }\n\n  /** Cancel all pending requests */\n  public cancelPendingRequests(): void {\n    this.cancelPending$.next(true);\n  }\n\n\n  public cached(invalidate = false) {\n    this.cachedRequest = true;\n    this.invalidateCache = invalidate;\n\n    return this;\n  }\n\n\n  /**\n   * Set the request mode to SECURED for the next request.\n   *\n   * Secured Mode force the next request to include the authentication token.\n   * The token must be requested previously using the \"authorize\" method.\n   */\n  public secured(): RestClientService {\n    this.secureRequest = true;\n\n    return this;\n  }\n\n  /**\n   * Set the request mode to PUBLIC for the next request.\n   *\n   * Public is the default request mode and ensure that no authentication token\n   * will be pass on the next request.\n   */\n  public public(): RestClientService {\n    this.secureRequest = false;\n\n    return this;\n  }\n\n  /**\n   * API request using GET method\n   *\n   * @param url\n   * @param data A list of parametes\n   */\n  public get(url: string, data?: {}): Observable<any> {\n    return this.request(HttpMethod.Get, url, data);\n  }\n\n  /**\n   * API request using POST method\n   *\n   * @param url\n   * @param data\n   * @param responseType\n   * @param httpOptions\n   */\n  public post(url: string, data?: {}, responseType?: string, httpOptions: IHttpOptions = {}): Observable<any> {\n    return this.request(HttpMethod.Post, url, data, responseType, httpOptions);\n  }\n\n  /**\n   * API request using PUT method\n   *\n   * @param url\n   * @param data\n   * @param responseType\n   * @param httpOptions\n   */\n  public put(url: string, data?: {}, responseType?: string, httpOptions: IHttpOptions = {}): Observable<any> {\n    return this.request(HttpMethod.Put, url, data, responseType, httpOptions);\n  }\n\n  /**\n   * API request using DELETE method\n   *\n   * @param url\n   * @param data\n   * @param responseType\n   */\n  public delete(url: string, data?: {}, responseType?: string): Observable<any> {\n    return this.request(HttpMethod.Delete, url, data, responseType);\n  }\n\n  /** Set the upload file mode */\n  public withFiles(): RestClientService {\n    this.withFilesRequest = true;\n\n    return this;\n  }\n\n  /**\n   * Create a FormData object to be send as request payload data\n   */\n  protected createFormData(object: any, form?: FormData, namespace?: string): FormData {\n    const formData = form || new FormData();\n\n    for (const property in object) {\n\n      if (!object.hasOwnProperty(property) || !object[property]) { continue; }\n\n      const formKey = namespace ? `${namespace}[${property}]` : property;\n      if (object[property] instanceof Date) {\n        formData.append(formKey, object[property].toISOString());\n      } else if (object[property] instanceof FileList) {\n        for (let i = 0; i < object[property].length; i++) {\n          formData.append(`${property}[]`, object[property].item(i));\n        }\n      } else if (\n        typeof object[property] === 'object' && !(object[property] instanceof File)) {\n        this.createFormData(object[property], formData, formKey);\n      } else {\n        formData.append(formKey, object[property]);\n      }\n    }\n    return formData;\n  }\n\n\n\n  protected buildUrl(url: string): string {\n    let nUrl = `${this.config.endPoint.replace(/\\/$/, '')}/${url.replace(/^\\//g, '')}`;\n    const match = nUrl.match(/\\.([0-9a-z]+)(?:[\\?#]|$)/i);\n\n    if (this.config.mockData && match == null) {\n      nUrl = `${nUrl}.json`;\n    }\n\n    return nUrl;\n  }\n\n\n  /**\n   * Return the request headers based on configuration parameters\n   */\n  private buildHeaders() {\n    const header = { ...this.baseHeader };\n\n    if (this.config.language) { header['Accept-Language'] = this.config.language; }\n\n    if (this.secureRequest) {\n      const token = this.token;\n      if (!token) {\n        console.warn(\n          'Executing a secure request without TOKEN. '\n          + 'Authorization header will not be set!'\n        );\n      } else {\n        header.Authorization = `Bearer ${token}`;\n      }\n\n      this.secureRequest = false;\n    }\n\n    return header;\n  }\n\n\n\n  /** Raw request method */\n  protected request(\n    method: HttpMethod, url: string, data?: any, responseType?: string,\n    httpOptions: IHttpOptions = {}\n  ): Observable<any> {\n    const msDelay = Math.floor((Math.random() * 2000) + 1000);\n    const header = this.buildHeaders();\n\n    const rType = (responseType ? responseType : 'json') as 'text';\n\n    if (this.withFilesRequest) { data = this.createFormData(data); this.withFilesRequest = false; }\n\n    let cacheKey = '';\n    if (this.cachedRequest) {\n      cacheKey = btoa(unescape(encodeURIComponent(method + '_' + url + '_' + (method === HttpMethod.Get ? JSON.stringify(data) : ''))));\n      if (!this.invalidateCache) {\n        const cached = this.cache.get(cacheKey);\n        if (cached) {\n          this.cachedRequest = false;\n          return of(cached);\n        }\n      } else {\n        this.cache.invalidate(cacheKey);\n      }\n    }\n\n    const options = {\n      body: method === HttpMethod.Get ? {} : data,\n      responseType: rType,\n      params: method === HttpMethod.Get ? data : {},\n      headers: header\n    };\n\n    return this.http\n      .request(\n        this.config.mockData ? HttpMethod.Get : method, this.buildUrl(url),\n        { ...options, ...httpOptions }\n      )\n      .pipe(takeUntil(this.cancelPending$))\n      .pipe(delay(this.config.mockData ? msDelay : 0))\n      .pipe(tap((resp: any) => {\n        if (this.cachedRequest) {\n          this.cachedRequest = false;\n          this.cache.set(cacheKey, resp);\n        }\n      }\n      ))\n      .pipe(catchError((err) => {\n        if (\n          this.config.UnauthorizedRedirectUri\n          && url !== this.config.authUri\n          && err.status === 401\n        ) {\n          this.router.navigate([this.config.UnauthorizedRedirectUri]).then(() => { });\n          this.cancelPendingRequests();\n        }\n        return throwError(err);\n      }));\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { CookieModule, CookieService } from 'ngx-cookie';\n\nimport { RestServiceConfig } from './ngx-rest.config';\nimport { FileDownload } from './file-download.service';\nimport { FileUpload } from './file-upload.service';\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    CookieModule.forRoot()\n  ],\n  providers: [\n    HttpClient,\n    CookieService,\n    FileDownload,\n    FileUpload,\n    RouterModule\n  ]\n})\nexport class NgxRestModule {\n  public static forRoot(config?: RestServiceConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxRestModule,\n      providers: [\n        { provide: RestServiceConfig, useValue: config }\n      ]\n    };\n  }\n}\n"]}