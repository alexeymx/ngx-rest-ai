var FileDownload_1;
import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpRequest, HttpHeaders, HttpParams } from '@angular/common/http';
import { map, distinctUntilChanged, filter } from 'rxjs/operators';
import { isNullOrUndefined, isUndefined } from 'util';
/**
 * FileDownload request state enum
 */
export var FileDownloadState;
(function (FileDownloadState) {
    FileDownloadState["initialize"] = "initialize";
    FileDownloadState["inProgress"] = "inProgress";
    FileDownloadState["completed"] = "completed";
})(FileDownloadState || (FileDownloadState = {}));
let FileDownload = FileDownload_1 = class FileDownload {
    /**
     * Service class constructor
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * Convert bytes size to human readable format
     */
    static humanReadableFormat(bytes) {
        const e = (Math.log(bytes) / Math.log(1e3)) | 0;
        return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';
    }
    /**
     * Save the Blob data
     */
    static blobSave(saveAs, data) {
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            window.navigator.msSaveOrOpenBlob(data, saveAs);
        }
        else {
            const url = window.URL.createObjectURL(data), a = document.createElement('a');
            document.body.appendChild(a);
            a.setAttribute('style', 'display: none');
            a.href = url;
            a.download = saveAs;
            a.click();
            setTimeout(() => { window.URL.revokeObjectURL(url); document.body.removeChild(a); }, 400);
        }
    }
    /**
     * Request the file to be downloaded
     */
    download(method, url, saveAs, options = {}) {
        method = method.toLowerCase();
        if (['get', 'post', 'put'].indexOf(method) === -1) {
            throw new Error(`FileDownload: Method "${method}" not allow, use "GET", "POST" or "PUT"`);
        }
        let result = { state: null, saveAs: saveAs, total: 0, loaded: 0, progress: 0 }, Params = new HttpParams();
        const Options = {
            reportProgress: true,
            headers: new HttpHeaders(options.headers || {})
        };
        if (options.params) {
            Object.keys(options.params).forEach((key) => { Params = Params.set(key, options.params[key]); });
        }
        const res = method === 'GET'
            ? new HttpRequest(method, url, Object.assign(Object.assign({}, Options), { responseType: 'blob', params: Params }))
            : new HttpRequest(method, url, options.params || {}, Object.assign(Object.assign({}, Options), { responseType: 'blob' }));
        return this.http
            .request(res)
            .pipe(map((event) => {
            switch (event.type) {
                case HttpEventType.Sent:
                    result = Object.assign(Object.assign({}, result), { state: FileDownloadState.initialize });
                    break;
                case HttpEventType.DownloadProgress:
                    if (!isUndefined(event.total)) {
                        result = Object.assign(Object.assign({}, result), {
                            state: FileDownloadState.inProgress,
                            total: event.total,
                            loaded: event.loaded,
                            progress: Math.round(100 * event.loaded / event.total)
                        });
                    }
                    break;
                case HttpEventType.Response:
                    if (result.state !== FileDownloadState.completed) {
                        result = Object.assign(Object.assign({}, result), { state: FileDownloadState.completed });
                        FileDownload_1.blobSave(saveAs, event.body);
                    }
                    break;
            }
            return result;
        }), filter((val) => !isNullOrUndefined(val)), distinctUntilChanged());
    }
    /**
     * Upload the files using POST HTTP method
     */
    get(url, saveAs, options = {}) {
        return this.download('get', url, saveAs, options);
    }
    /**
     * Upload the files using POST HTTP method
     */
    post(url, saveAs, options = {}) {
        return this.download('post', url, saveAs, options);
    }
    /**
     * Upload the files using PUT HTTP method
     */
    put(url, saveAs, options = {}) {
        return this.download('put', url, saveAs, options);
    }
};
FileDownload.ctorParameters = () => [
    { type: HttpClient }
];
FileDownload = FileDownload_1 = __decorate([
    Injectable()
], FileDownload);
export { FileDownload };
//# sourceMappingURL=data:application/json;base64,